, "cilambdaNu_Uncondnfix"
, "ciLambdaNu_UncondnTinfty"
, "CInuUnbiased"
, "Cmatrix"
, "commutation"
, "CondReg"
, "CondStat"
, "CR_reg_cond"
, "CR_reg"
, "duplication"
, "EstTimeInvariantMod"
, "EstTimeVariantMod"
, "GOS_main"
, "GOS_statistics"
, "GRS_Uncstatistics"
, "InstrChoice"
, "invVec"
, "plotsNu"
, "plotsRiskPremia"
, "Tijmat"
, "TSRegress_CN_V_cond"
, "TSRegress_CN_V"
, "UnbiasedEst_Cond"
, "UnbiasedEst"
, "UncStat"
, "varcovNW"
, "vec"
, "vech"
, "weightsSTAT")
gos_functions <- tibble::tibble(matlab_functions)
gos_functions$r_functions <- dplyr::case_when(gos_functions$matlab_functions == "vec" ~ "matrixcalc::vec"
, gos_functions$matlab_functions == "vech" ~ "matrixcalc::vech"
, gos_functions$matlab_functions == "varcovNW" ~ "varcovNW"
, gos_functions$matlab_functions == "GRS_Uncstatistics" ~ "GRS.test::GRS.test"
, gos_functions$matlab_functions == "commutation" ~ "matrixcalc::commutation.matrix"
, gos_functions$matlab_functions == "duplication" ~ "matrixcalc::D.matrix"
, gos_functions$matlab_functions == "Cmatrix" ~ "Cmatrix"
, gos_functions$matlab_functions == "Tijmat" ~ "Tijmat"
, gos_functions$matlab_functions == "invVec" ~ "invVec"
, gos_functions$matlab_functions == "UnbiasedEst" ~ "UnbiasedEst"
, gos_functions$matlab_functions == "UnbiasedEst_Cond" ~ "UnbiasedEst_Cond"
, gos_functions$matlab_functions == "TSRegress_CN_V" ~ "TSRegress_CN_V"
, gos_functions$matlab_functions == "TSRegress_CN_V_cond" ~ "TSRegress_CN_V_cond"
, gos_functions$matlab_functions == "weightsSTAT" ~ "weightsSTAT"
, gos_functions$matlab_functions == "InstrChoice" ~ "InstrChoice"
, gos_functions$matlab_functions == "UncStat" ~ "UncStat"
, gos_functions$matlab_functions == "CR_reg" ~ "CR_reg"
, gos_functions$matlab_functions == "CR_reg_cond" ~ "CR_reg_cond"
, gos_functions$matlab_functions == "CondReg" ~ "CondReg"
, gos_functions$matlab_functions == "CInuUnbiased" ~ "CInuUnbiased"
, gos_functions$matlab_functions == "cilambdaNu_Uncondnfix" ~ "cilambdaNu_Uncondnfix"
, gos_functions$matlab_functions == "ciLambdaNu_UncondnTinfty" ~ "ciLambdaNu_UncondnTinfty"
, gos_functions$matlab_functions == "CIlambda_nu_F_nfix" ~ "CIlambda_nu_F_nfix"
)
View(gos_functions)
K = 1
M <- if(K == 1) 0.0750 else if(K == 3) 0.0580 else 0.0670
M
K=3
M <- if(K == 1) 0.0750 else if(K == 3) 0.0580 else 0.0670
M
K = 4
M <- if(K == 1) 0.0750 else if(K == 3) 0.0580 else 0.0670
aaaa
aaaa <- matrix(1:9, 3, 3)
1 * aaaa
1 %*% aaaa
gos_functions$r_functions <- dplyr::case_when(gos_functions$matlab_functions == "vec" ~ "matrixcalc::vec"
, gos_functions$matlab_functions == "vech" ~ "matrixcalc::vech"
, gos_functions$matlab_functions == "varcovNW" ~ "varcovNW"
, gos_functions$matlab_functions == "GRS_Uncstatistics" ~ "GRS.test::GRS.test"
, gos_functions$matlab_functions == "commutation" ~ "matrixcalc::commutation.matrix"
, gos_functions$matlab_functions == "duplication" ~ "matrixcalc::D.matrix"
, gos_functions$matlab_functions == "Cmatrix" ~ "Cmatrix"
, gos_functions$matlab_functions == "Tijmat" ~ "Tijmat"
, gos_functions$matlab_functions == "invVec" ~ "invVec"
, gos_functions$matlab_functions == "UnbiasedEst" ~ "UnbiasedEst"
, gos_functions$matlab_functions == "UnbiasedEst_Cond" ~ "UnbiasedEst_Cond"
, gos_functions$matlab_functions == "TSRegress_CN_V" ~ "TSRegress_CN_V"
, gos_functions$matlab_functions == "TSRegress_CN_V_cond" ~ "TSRegress_CN_V_cond"
, gos_functions$matlab_functions == "weightsSTAT" ~ "weightsSTAT"
, gos_functions$matlab_functions == "InstrChoice" ~ "InstrChoice"
, gos_functions$matlab_functions == "UncStat" ~ "UncStat"
, gos_functions$matlab_functions == "CR_reg" ~ "CR_reg"
, gos_functions$matlab_functions == "CR_reg_cond" ~ "CR_reg_cond"
, gos_functions$matlab_functions == "CondReg" ~ "CondReg"
, gos_functions$matlab_functions == "CInuUnbiased" ~ "CInuUnbiased"
, gos_functions$matlab_functions == "cilambdaNu_Uncondnfix" ~ "cilambdaNu_Uncondnfix"
, gos_functions$matlab_functions == "ciLambdaNu_UncondnTinfty" ~ "ciLambdaNu_UncondnTinfty"
, gos_functions$matlab_functions == "CIlambda_nu_F_nfix" ~ "CIlambda_nu_F_nfix"
, gos_functions$matlab_functions == "CIlambda_nu_F_nTinfty" ~ "CIlambda_nu_F_nTinfty"
)
View(gos_functions)
optimbase::zero(2, 3)
optimbase::zeros(2, 3)
diag(3)
diag(3) / diag(1:3)
diag(1:3)
View(gos_functions)
?trace
?solve
Matrix::solve(aaaa)
aaaa <- solve(1:3)
aaaa %>% solve(1:3)
?pnorm
gos_functions$r_functions <- dplyr::case_when(gos_functions$matlab_functions == "vec" ~ "matrixcalc::vec"
, gos_functions$matlab_functions == "vech" ~ "matrixcalc::vech"
, gos_functions$matlab_functions == "varcovNW" ~ "varcovNW"
, gos_functions$matlab_functions == "GRS_Uncstatistics" ~ "GRS.test::GRS.test"
, gos_functions$matlab_functions == "commutation" ~ "matrixcalc::commutation.matrix"
, gos_functions$matlab_functions == "duplication" ~ "matrixcalc::D.matrix"
, gos_functions$matlab_functions == "Cmatrix" ~ "Cmatrix"
, gos_functions$matlab_functions == "Tijmat" ~ "Tijmat"
, gos_functions$matlab_functions == "invVec" ~ "invVec"
, gos_functions$matlab_functions == "UnbiasedEst" ~ "UnbiasedEst"
, gos_functions$matlab_functions == "UnbiasedEst_Cond" ~ "UnbiasedEst_Cond"
, gos_functions$matlab_functions == "TSRegress_CN_V" ~ "TSRegress_CN_V"
, gos_functions$matlab_functions == "TSRegress_CN_V_cond" ~ "TSRegress_CN_V_cond"
, gos_functions$matlab_functions == "weightsSTAT" ~ "weightsSTAT"
, gos_functions$matlab_functions == "InstrChoice" ~ "InstrChoice"
, gos_functions$matlab_functions == "UncStat" ~ "UncStat"
, gos_functions$matlab_functions == "CR_reg" ~ "CR_reg"
, gos_functions$matlab_functions == "CR_reg_cond" ~ "CR_reg_cond"
, gos_functions$matlab_functions == "CondReg" ~ "CondReg"
, gos_functions$matlab_functions == "CInuUnbiased" ~ "CInuUnbiased"
, gos_functions$matlab_functions == "cilambdaNu_Uncondnfix" ~ "cilambdaNu_Uncondnfix"
, gos_functions$matlab_functions == "ciLambdaNu_UncondnTinfty" ~ "ciLambdaNu_UncondnTinfty"
, gos_functions$matlab_functions == "CIlambda_nu_F_nfix" ~ "CIlambda_nu_F_nfix"
, gos_functions$matlab_functions == "CIlambda_nu_F_nTinfty" ~ "CIlambda_nu_F_nTinfty"
, gos_functions$matlab_functions == "CondStat" ~ "CondStat"
)
View(gos_functions)
shiny::runApp('~/Desktop/AlphaCruncher')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
library(magrittr)
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
library(shiny)
?isTruthy
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
?dplyr::if_else
?ifelse
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
test_data <- gordon_data %>% filter(date %in% "2014-11-11")
test_data <- gordon_data %>% filter(date %in% as.Date("2014-11-11"))
View(gordon_data)
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
P <- g <- m <- "missing"
gordon_data
View(gordon_data)
test_data <- gordon_data %>% filter(date %in% as.Date("2016-05-07"))
test_data <- gordon_data %>% dplyr::filter(date %in% as.Date("2016-05-07"))
test_data <- gordon_data %>% dplyr::filter(date %in% as.Date("2016-05-08"))
D <- dFun(test_data, 'dividend_per_share')
D
str(D)
class(D)
is.na(test_data)
?is.na
data_selected <- test_data
m <- dFun(data_selected, 'expected_return')
g <- dFun(data_selected, 'dividend_growth_rate')
P <- dFun(data_selected, 'price')
data_selected <- c(D, m, g, P)
nrow(test_data)
ncol(test_data)
data_selected <- test_data
D <- dFun(data_selected, 'dividend_per_share')
m <- dFun(data_selected, 'expected_return')
g <- dFun(data_selected, 'dividend_growth_rate')
P <- dFun(data_selected, 'price')
data_selected <- c(D, m, g, P)
is.null(D)
is.na(D)
D
data_selected <- test_data
D <- dFun(data_selected, 'dividend_per_share')
m <- dFun(data_selected, 'expected_return')
g <- dFun(data_selected, 'dividend_growth_rate')
P <- dFun(data_selected, 'price')
data_selected <- c(D, m, g, P)
dFun <- function(data, dType) {
if (nrow(data) == 0) {
return(NA)
} else {
out <- data %>% dplyr::filter(data_type %in% dType) %>%
dplyr::select(value) %>% .[[1]]
}
}
data_selected <- test_data
D <- dFun(data_selected, 'dividend_per_share')
m <- dFun(data_selected, 'expected_return')
g <- dFun(data_selected, 'dividend_growth_rate')
P <- dFun(data_selected, 'price')
data_selected <- c(D, m, g, P)
is.na(data_selected)
is.na(sum(data_selected))
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
?floor
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
?withMathJax
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
runApp('~/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model')
getwd()
setwd("/Users/Albi/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting/data/")
load("time_series_data.csv")
readr::read_csv("time_series_data.csv")
time_series_data <- readr::read_csv("time_series_data.csv")
View(time_series_data)
setwd("/Users/Albi/Desktop/AlphaCruncher/Rdevelopment/shiny_apps/gordon_growth_model/")
library(combinat)
library(magrittr)
library(tidyverse)
library(lubridate)
library(doParallel)
no_cores <- detectCores() - 1
cl<-makeCluster(no_cores, type = "FORK")
registerDoParallel(cl)
library(lubridate)
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
fake_monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
fake_monthly_dates
fake_monthly_dates <- c(fake_monthly_dates, fake_monthly_dates)
fake_stocks <- c("a", "b")
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
fake_monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
fake_monthly_dates <- rep(fake_monthly_dates, 2)
fake_monthly_dates
fake_stocks <- c("apple", "orange")
fake_stocks <- rep(fake_stocks, each = n_months)
load("gordon_data.Rdata")
View(gordon_data)
fake_price <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
fake_prices <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
fake_expected_returns <- runif(n_month * 2, 1.02, 1.2)
fake_expected_returns <- runif(n_months * 2, 1.02, 1.2)
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(fake_stocks, each = n_months)
prices <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.02, 1.2) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 1.02, 1.4) %>% round(digits = 2)
gordon_data <- tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
)
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.02, 1.2) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 1.02, 1.4) %>% round(digits = 2)
gordon_data <- tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
)
View(gordon_data)
gordon_data <- tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
roxygen2::melt(id.vars("date", "name"))
gordon_data <- tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars("date", "name"))
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(reshape2::id.vars("date", "name"))
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(reshape2::id.vars("date", "name"))
library(reshape2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(reshape2::id.vars("date", "name"))
library(tidyverse)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars("date", "name"))
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
View(gordon_data)
save(gordon_data, file = "gordon_data.Rdata")
runApp()
View(gordon_data)
names(gordon_data)
names(gordon_data)[3] <- "data_type"
names(gordon_data)
save(gordon_data, file = "gordon_data.Rdata")
runApp()
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.2, 1.5) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 1.01, 1.1) %>% round(digits = 2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
names(gordon_data)[3] <- "data_type"
runApp()
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 5, 15) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.2, 1.5) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 0.5, 1) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 0.9, 1.1) %>% round(digits = 2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
names(gordon_data)[3] <- "data_type"
runApp()
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 15, 25) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.2, 1.5) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 0.5, 1) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 0.9, 1.1) %>% round(digits = 2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
names(gordon_data)[3] <- "data_type"
save(gordon_data, file = "gordon_data.Rdata")
runApp()
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 1, 5) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.2, 1.5) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 0.5, 1) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 0.9, 1.1) %>% round(digits = 2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
names(gordon_data)[3] <- "data_type"
save(gordon_data, "gordon_data.Rdata")
save(gordon_data, file = "gordon_data.Rdata")
runApp()
n_months <- 30
last_date <- Sys.Date() %m-% months(1)
day(last_date) <- days_in_month(month(last_date))
initial_date <- last_date %m-% months(n_months - 1)
day(initial_date) <- 1
monthly_dates <- seq.Date(from = initial_date,
to = last_date,
by = "months")
monthly_dates <- c(monthly_dates, monthly_dates)
stocks <- c("apple", "orange")
stocks <- rep(stocks, each = n_months)
prices <- runif(n_months * 2, 1, 2) %>% round(digits = 2)
expected_returns <- runif(n_months * 2, 1.2, 1.5) %>% round(digits = 2)
dividend_per_shares <- runif(n_months * 2, 0.5, 1) %>% round(digits = 2)
dividend_growth_rates <- runif(n_months * 2, 0.9, 1.1) %>% round(digits = 2)
gordon_data <- tibble::tibble(
date = monthly_dates,
name = stocks,
price = prices,
expected_return = expected_returns,
dividend_per_share = dividend_per_shares,
dividend_growth_rate = dividend_growth_rates
) %>%
reshape2::melt(id.vars = c("date", "name"))
names(gordon_data)[3] <- "data_type"
save(gordon_data, file = "gordon_data.Rdata")
runApp()
