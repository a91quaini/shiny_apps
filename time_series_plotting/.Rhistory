huber.ret.call <- huber(ret.call.ask)
huber.ret.put <- - huber(ret.put.bid)
huber.ret.call
huber.ret.put
huber.ret.call <- hubers(ret.call.ask)
huber.ret.put <- - hubers(ret.put.bid)
ret.put.bid
hubers(ret.put.bid)
huber.ret.put <- - (hubers(ret.put.bid))
hubers(ret.call.ask)[1]
hubers(ret.call.ask)[[1]]
huber.ret.call <- hubers(ret.call.ask)[[1]]
huber.ret.put <- - hubers(ret.put.bid)[[1]]
huber.ret.call
huber.ret.put
fitted.values <- call.ask.scaled * huber.ret.call + put.bid.scaled * huber.ret.put
r.squared(mkt.return, fitted.values, 2)
r.squared <- function(y, fitted.values, k) {
N <- length(y)
SS.tot <- sum((y - mean(y))^2)
SS.reg <- sum((y - fitted.values)^2)
out1 <- 1 - SS.reg / SS.tot
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
out3 <- sum((fitted.values)^2)/(sum((fitted.values)^2)+sum((y-fitted.values)^2))
out4 <- 1 - ((1-out3) * (N-1)) / (N - k)
out5 <- 1 - sum((y - fitted.values)^2) / sum(y^2)
out6 <- 1 - ((1-out5) * (N-1)) / (N - k)
out <- list(R.squared = out1, R.squared.adj = out2, R.squared.code = out3, R.squared.adj.code = out4,
R.squared.test = out5, R.squared.adj.test = out6)
return(out)
}
summary(reg.upperbound.mean)
r.squared(mkt.return, reg.upperbound.mean$fitted.values, k=3)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
if(noconst) {
out1 <- 1 - sum((y - fitted.values)^2) / sum(y^2)
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
} else {
out1 <- 1 - sum((y - fitted.values)^2 / sum((y - mean(y))^2)
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
if(noconst) {
out1 <- 1 - sum((y - fitted.values)^2) / sum(y^2)
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
} else {
out1 <- 1 - sum((y - fitted.values)^2) / sum((y - mean(y))^2)
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
}
out <- list(R.squared = out1, R.squared.adj = out2)
return(out)
}
summary(reg.upperbound.mean)
r.squared(mkt.return, reg.upperbound.mean$fitted.values, k=3, noconst=FALSE)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
SS.e <- sum((y - fitted.values)^2)
if(noconst) {
SS.tot <- sum(y^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - (SS.e / (N - k)) / (SS.tot / N)
} else {
SS.tot <- sum((y - mean(y))^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
}
out <- list(R.squared = out1, R.squared.adj = out2)
return(out)
}
summary(reg.upperbound.mean)
r.squared(mkt.return, reg.upperbound.mean$fitted.values, k=3, noconst=FALSE)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
reg.mkt.mean <- lm(mkt.return ~ 1)
summary(reg.mkt.mean)
reg.mkt.median <- rq(mkt.return ~ 1, tau=.5)
summary(reg.mkt.median)
reg.mkt.mean.rob <- rlm(mkt.return ~ 1)
summary(reg.mkt.mean.rob)
reg.upperbound.mean <- lm(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean)
reg.upperbound.median <- rq(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled, tau=.5)
summary(reg.upperbound.median)
reg.upperbound.mean.rob <- rlm(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.rob)
reg.upperbound.mean.noconst <- lm(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.noconst)
reg.upperbound.median.noconst <- rq(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled, tau=.5)
summary(reg.upperbound.median.noconst)
reg.upperbound.mean.rob.noconst <- rlm(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.rob.noconst)
reg.upperbound.mean.nested <- lm(mkt.return.adj ~ 1 + call.ask.scaled)
summary(reg.upperbound.mean.nested)
ftdata2 <- read.table("fear_trading_data2.txt", sep="\t", stringsAsFactors = FALSE, header = TRUE)
attach(ftdata2)
reg.upperbound.mean.nested <- lm(mkt.return.adj ~ 1 + call.ask.scaled)
summary(reg.upperbound.mean.nested)
reg.upperbound.median.nested <- rq(mkt.return.adj ~ 1 + call.ask.scaled, tau=.5)
summary(reg.upperbound.median.nested)
reg.upperbound.mean.rob.nested <- rlm(mkt.return.adj ~ 1 + call.ask.scaled)
summary(reg.upperbound.mean.rob.nested)
reg.upperbound.mean.nested.noconst <- lm(mkt.return.adj ~ -1 + call.ask.scaled)
summary(reg.upperbound.mean.nested.noconst)
reg.upperbound.median.nested.noconst <- rq(mkt.return.adj ~ -1 + call.ask.scaled, tau=.5)
summary(reg.upperbound.median.nested.noconst)
reg.upperbound.mean.rob.nested.noconst <- rlm(mkt.return.adj ~ -1 + call.ask.scaled)
summary(reg.upperbound.mean.rob.nested.noconst)
med.scaled <- (call.med.scaled + put.med.scaled) / 2
reg.upperbound.med.mean <- lm(mkt.return ~ 1 + med.scaled)
summary(reg.upperbound.med.mean)
reg.upperbound.med.median <- rq(mkt.return ~ 1 + med.scaled, tau=.5)
reg.upperbound.med.mean.rob <- rlm(mkt.return ~ 1 + med.scaled)
summary(reg.upperbound.med.mean.rob)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
SS.e <- sum((y - fitted.values)^2)
if(noconst) {
SS.tot <- sum(y^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - (SS.e / (N - k)) / (SS.tot / N)
} else {
SS.tot <- sum((y - mean(y))^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
}
out <- list(R.squared = out1, R.squared.adj = out2)
return(out)
}
r.squared(mkt.return, reg.upperbound.mean$fitted.values, k=3, noconst=FALSE)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
mean.ret.call <- mean(ret.call.ask)
mean.ret.put <- - mean(ret.put.bid)
mean.ret.call
mean.ret.put
fitted.values <- call.ask.scaled * mean.ret.call + put.bid.scaled * mean.ret.put
r.squared(mkt.return, fitted.values, 2)
median.ret.call <- median(ret.call.ask)
median.ret.put <- - median(ret.put.bid)
median.ret.call
median.ret.put
fitted.values <- call.ask.scaled * median.ret.call + put.bid.scaled * median.ret.put
r.squared(mkt.return, fitted.values, 2)
huber.ret.call <- hubers(ret.call.ask)[[1]]
huber.ret.put <- - hubers(ret.put.bid)[[1]]
huber.ret.call
huber.ret.put
fitted.values <- call.ask.scaled * huber.ret.call + put.bid.scaled * huber.ret.put
r.squared(mkt.return, fitted.values, 2)
ulsv <- usv.ask + lsv.bid
reg.ulsv.mean <- lm(mkt.return ~ 1 + ulsv)
summary(reg.ulsv.mean)
ulss <- uss.ask + lss.bid
reg.ulss.mean <- lm(mkt.return ~ 1 + ulss)
summary(reg.ulss.mean)
reg.lsv.mean <- lm(mkt.return ~ 1 + lsv)
summary(reg.lsv.mean)
y <- rnorm(100, 10, 1)
x1 <- y + rnorm(100, 0, 1)
x2 <- y + rnorm(100, 0, 4)
reg.model1 <- lm(y ~ x1)
library(quantreg)
reg.model2 <- rq(y ~ x2, tau=.5)
?lm
reg.model1$effects
reg.model1$rank
reg.model2$rank
reg.model1$assign
reg.model1$model
reg.model2$model
?anova
setwd("~/Documents/Unige/Research/FearTrading/Data")
ftdata2 <- read.table("fear_trading_data2.txt", sep="\t", stringsAsFactors = FALSE, header = TRUE)
attach(ftdata2)
par(mar = c(2,2,1,2)+.1)
library(MASS)
library(quantreg)
reg.mkt.mean <- lm(mkt.return ~ 1)
summary(reg.mkt.mean)
reg.mkt.median <- rq(mkt.return ~ 1, tau=.5)
summary(reg.mkt.median)
reg.mkt.mean.rob <- rlm(mkt.return ~ 1)
summary(reg.mkt.mean.rob)
reg.upperbound.mean <- lm(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean)
reg.upperbound.median <- rq(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled, tau=.5)
summary(reg.upperbound.median)
reg.upperbound.mean.rob <- rlm(mkt.return ~ 1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.rob)
reg.upperbound.mean.noconst <- lm(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.noconst)
reg.upperbound.median.noconst <- rq(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled, tau=.5)
summary(reg.upperbound.median.noconst)
reg.upperbound.mean.rob.noconst <- rlm(mkt.return ~ -1 + call.ask.scaled + put.bid.scaled)
summary(reg.upperbound.mean.rob.noconst)
reg.upperbound.mean.nested <- lm(mkt.return.adj ~ 1 + call.ask.scaled)
summary(reg.upperbound.mean.nested)
reg.upperbound.median.nested <- rq(mkt.return.adj ~ 1 + call.ask.scaled, tau=.5)
summary(reg.upperbound.median.nested)
reg.upperbound.mean.rob.nested <- rlm(mkt.return.adj ~ 1 + call.ask.scaled)
summary(reg.upperbound.mean.rob.nested)
reg.upperbound.mean.nested.noconst <- lm(mkt.return.adj ~ -1 + call.ask.scaled)
summary(reg.upperbound.mean.nested.noconst)
reg.upperbound.median.nested.noconst <- rq(mkt.return.adj ~ -1 + call.ask.scaled, tau=.5)
reg.upperbound.mean.rob.nested.noconst <- rlm(mkt.return.adj ~ -1 + call.ask.scaled)
summary(reg.upperbound.mean.rob.nested.noconst)
med.scaled <- (call.med.scaled + put.med.scaled) / 2
reg.upperbound.med.mean <- lm(mkt.return ~ 1 + med.scaled)
summary(reg.upperbound.med.mean)
reg.upperbound.med.median <- rq(mkt.return ~ 1 + med.scaled, tau=.5)
summary(reg.upperbound.med.median)
reg.upperbound.med.mean.rob <- rlm(mkt.return ~ 1 + med.scaled)
summary(reg.upperbound.med.mean.rob)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
SS.e <- sum((y - fitted.values)^2)
if(noconst) {
SS.tot <- sum(y^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - (SS.e / (N - k)) / (SS.tot / N)
} else {
SS.tot <- sum((y - mean(y))^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
}
out <- list(R.squared = out1, R.squared.adj = out2)
return(out)
}
summary(reg.upperbound.mean)
r.squared(mkt.return, reg.upperbound.mean$fitted.values, k=3, noconst=FALSE)
summary(reg.upperbound.mean.noconst)
r.squared(mkt.return, reg.upperbound.mean.noconst$fitted.values, k=2)
mean.ret.call <- mean(ret.call.ask)
mean.ret.put <- - mean(ret.put.bid)
mean.ret.call
mean.ret.put
fitted.values <- call.ask.scaled * mean.ret.call + put.bid.scaled * mean.ret.put
r.squared(mkt.return, fitted.values, 2)
ret.matrix <- matrix(c(ret.call.ask, ret.put.bid), ncol=2)
ret.matrix
mu <- colMeans(ret.matrix)
mu
ret.matrix <- matrix(c(ret.call.ask, - ret.put.bid), ncol=2)
mu <- colMeans(ret.matrix)
mu
mean.ret.call
mean.ret.put
sigma <- cov(ret.matrix)
sigma
N <- nrow(ftdata2)
?t
mu.hat
ret.matrix <- matrix(c(ret.call.ask, - ret.put.bid), ncol=2)
mu.hat <- colMeans(ret.matrix)
sigma.hat <- cov(ret.matrix)
test <- N *
fitted.values <- call.ask.scaled * mean.ret.call + put.bid.scaled * mean.ret.put
mu.hat
sigma.hat
dim(mu.hat)
test <- N * t(mu.hat) %*% solve(sigma.hat) %*% mu.hat
test
Y <- cbind(ret.call.ask, ret.call.bid)
fit <- lm(Y ~ 1)
summary(fit)
Y <- cbind(ret.call.ask, ret.put.bid)
fit <- lm(Y ~ 1)
summary(fit)
mean.ret.call
mean.ret.put
summary(manova(fit))
summary(anova(fit))
manova(fit)
mean.ret.call <- mean(ret.call.ask)
mean.ret.put <- - mean(ret.put.bid)
mean.ret.call
mean.ret.put
ret.matrix <- matrix(c(ret.call.ask, - ret.put.bid), ncol=2)
mu.hat <- colMeans(ret.matrix)
sigma.hat <- cov(ret.matrix)
test <- N * t(mu.hat) %*% solve(sigma.hat) %*% mu.hat
test
fitted.values <- call.ask.scaled * mean.ret.call + put.bid.scaled * mean.ret.put
r.squared(mkt.return, fitted.values, 2)
median.ret.call <- median(ret.call.ask)
median.ret.put <- - median(ret.put.bid)
median.ret.call
median.ret.put
fitted.values <- call.ask.scaled * median.ret.call + put.bid.scaled * median.ret.put
r.squared(mkt.return, fitted.values, 2)
huber.ret.call <- hubers(ret.call.ask)[[1]]
huber.ret.put <- - hubers(ret.put.bid)[[1]]
huber.ret.call
huber.ret.put
fitted.values <- call.ask.scaled * huber.ret.call + put.bid.scaled * huber.ret.put
r.squared(mkt.return, fitted.values, 2)
r.squared <- function(y, fitted.values, k, noconst=TRUE) {
N <- length(y)
SS.e <- sum((y - fitted.values)^2)
if(noconst) {
SS.tot <- sum(y^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - (SS.e / (N - k)) / (SS.tot / N)
} else {
SS.tot <- sum((y - mean(y))^2)
out1 <- 1 - SS.e / SS.tot
out2 <- 1 - ((1-out1) * (N-1)) / (N - k)
}
out <- list(R.squared = out1, R.squared.adj = out2)
return(out)
}
summary(reg.upperbound.mean)
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
library(quantreg)
max.eig <- function(N, sigma) {
d <- matrix(rnorm(N**2, sd = sigma), nrow = N)
#
E <- eigen(d)$values
#
abs(E)[[1]]
}
max.eig(5e2, 2)
?sapply
E = sapply(1:10000, function(n) {max.eig(5, 1)})
summary(E)
library(foreach)
foreach(n = 1:5) %do% max.eig(n, 1)
foreach(n = 1:5, .combine = 'c') %do% max.eig(n, 1)
foreach(n = 1:5) %:% foreach(m = 1:3) %do% max.eig(n, m)
foreach(n = 1:5) %:% foreach(m = 1:3, .combine = 'c') %do% max.eig(n, m)
foreach(n = 1:5, .combine='cbind') %:% foreach(m = 1:3, .combine = 'c') %do% max.eig(n, m)
foreach(n = 1:5, m = 1:3, .combine='c') %do% max.eig(n, m)
foreach(n = 1:100, .combine = c) %:% when (isPrime(n)) %do% n
install.packages("numbers")
library(numbers)
foreach(n = 1:100, .combine = c) %:% when (isPrime(n)) %do% n
foreach(n = 1:5) %dopar% max.eig(n, 1)
foreach(n = 1:5, .combine = c) %dopar% max.eig(n, 1)
foreach(n = 1:5, .combine = c) %dopar% max.eig(n, 1)
foreach(n = 1:5, .combine = 'c') %dopar% max.eig(n, 1)
foreach(n = 1:5, .combine = 'c') %dopar% max.eig(n, 1)
foreach(n = 1:5) %dopar% max.eig(n, 1)
install.packages("doMC")
registerDoMC(cores=4)
library("doMC")
registerDoMC(cores=4)
install.packages(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
benchmark(
foreach(n = 1:50) %do% max.eig(n, 1),
foreach(n = 1:50) %dopar% max.eig(n, 1)
)
library(doMC)
library(doSNOW)
install.packages(doSNOW)
install.packages("doSNOW")
library(doSNOW)
cluster = makeCluster(4, type = "SOCK")
registerDoSNOW(cluster)
benchmark(
foreach(n = 1:50) %do% max.eig(n, 1),
foreach(n = 1:50) %dopar% max.eig(n, 1)
)
stopCluster(cluster)
cluster = makeCluster(4, type = "MPI")
registerDoSNOW(cluster)
benchmark(
foreach(n = 1:50) %do% max.eig(n, 1),
foreach(n = 1:50) %dopar% max.eig(n, 1)
)
cluster = makeCluster(4, type = "MPI")
registerDoSNOW(cluster)
install.packages("Rmpi")
library(Rmpi)
library(Rmpi)
install.packages("Rmpi")
library(Rmpi)
library(doParallel)
cluster = makeCluster(4, type = "FORK")
?makeCluster
cluster = makeCluster(4, type = "FORK")
library(doParallel)
cluster = makeCluster(4, type = "FORK")
library(doSNOW)
cluster = makeCluster(4, type = "FORK")
cluster = makeForkCluster(4)
stopCluster(cluster)
library(doParallel)
cluster = makeForkCluster(4)
shiny::runApp('Unige/Research/FearTrading/Data/app/ft_realized_fantasy')
library(quantreg)
runApp('Unige/Research/FearTrading/Data/app/ft_realized_fantasy')
sqrt(2)
8^(1/3)
66067/13
shiny::runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
library(tidyverse)
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
shiny::runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting/app')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
setwd("~/Unige/R/ggplot2/Rgraphics")
housing <- read.csv("dataSets/landdata-states.csv")
View(housing)
ggplot(housing, aes(x = Home.Value)) +
geom_histogram()
df <- filter(housing, State %in% c("MA", "TX"))
ggplot(df, aes(x=Date,
y=Home.Value,
color=State)) +
geom_point
ggplot(df, aes(x=Date,
y=Home.Value,
color=State)) +
geom_point()
runApp('~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
runApp('~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting')
time_series_data <- readr::read_csv("data/time_series_data.csv")
setwd("~/AlphaCruncher/Rdevelopment/shiny_apps/time_series_plotting")
time_series_data <- readr::read_csv("data/time_series_data.csv")
tagging_data <- readr::read_csv("data/tagging_data.csv")
time_series_data %>% select(date)
min_rank(time_series_data %>% select(date))
min_rank(time_series_data %>% select(date) %>% .[[1]])
min_rank(time_series_data %>% select(date) %>% .[[1]])
range(time_series_data %>% select(date) %>% .[[1]])
min(time_series_data %>% select(date) %>% .[[1]])
min(time_series_data %>% select(date)[[1]])
min(range(time_series_data %>% select(date) %>% .[[1]]))
range(time_series_data %>% select(date) %>% .[[1]])[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
time_series_data <- readr::read_csv("data/time_series_data.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
time_series_data <- readr::read_csv("data/time_series_data.csv")
time_series_data %>% filter(id %in% c(11111, 11112))
time_series_data %>% filter(id %in% c(11111, 11112), frequency %in% "daily")
time_series_data %>% filter(id %in% c(11111, 11112), frequency %in% "monthly")
runApp()
runApp()
runApp()
time_series_data <- readr::read_csv("data/time_series_data.csv")
time_series_data %>% select(date) %>% distinct() %>% .[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?seq.Date
runApp()
runApp()
a <- c(as.Date("2005-3-2"))
a
a[1]
str(a)
str(a[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?need
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
